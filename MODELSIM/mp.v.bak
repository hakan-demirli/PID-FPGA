`timescale 1 ns / 100 ps
module mp();

reg CLOCK_50;
reg CLOCK_100;
reg CLOCK_3;
always #10 CLOCK_50 = ~CLOCK_50;
always #5 CLOCK_100 = ~CLOCK_100;
always #1666.6 CLOCK_3 = ~CLOCK_3;

initial
begin
	CLOCK_100 = 1;
	CLOCK_50 = 1;
	CLOCK_3 = 1;
end
//######## DUT AREA ###########
//######## DUT AREA ###########
reg direction;
wire uart_tx;
wire pwm;
reg [13:0]SW;
//wire [13:0]signal_dc;
initial
begin
	direction = 1;
	SW = 0;
	#1000 direction = 0;
	#1000 direction = 1;
	#2000 direction = 0;
	#1000 direction = 0;
end

MOTOR DUT_MOTOR(
	.CLK(CLOCK_3),
	.direction(direction),
	.oA(oA),
	.oB(oB)
); 


	//wire [2:0]stateTX;
	//.state_TX_0(stateTX),
	//.signal_dc(signal_dc)
	
TOP DUTTOP(
	.i_Clk(CLOCK_50),
	.o_UART_TX(uart_tx),
	.LEDG(),
	.GPIO_AB({oA,oB}), // GPIO_AB[0] = A, GPIO_AB[1] = B
	.GPIO_PWM(pwm),
	.SW(SW),
);
 
//reg ce;
reg [4:0]keys;
reg [63:0]sixfo;
wire ce_out;

	///////////////////////////////////
	////////// PID CONTROL ////////////
	///////////////////////////////////
	
initial begin
	keys = 0;
	sixfo = 64'h00FF_FFFF_FFFF_FFFF;
end
/*
module mp(
	input [15:0]audio_inR,
	output toggle_w,
	input CLOCK_50
);
reg toggle;
reg [15:0]audio_inR_previous;
assign toggle_w = toggle;

always@(posedge CLOCK_50)
begin
	audio_inR_previous <= audio_inR;
	
	if(audio_inR != audio_inR_previous)
	begin
		toggle <= ~toggle;
	end
	else
		toggle <= toggle;
end
	


endmodule
*/


////////////////////////////////////
///////////STATE MACHINE DEBUG/////
////////////////////////////////////
/*
parameter	WAIT_TX = 3'd0,
			START = 3'd1,
			SEND = 3'd2,
			DATA_VALID = 3'd3,
			WAIT_DONE = 3'd4,
			WAIT_CYCLE = 3'd5;

				 
reg [13*8-1:0] next_state;				 
always@(stateTX) begin 
    case(stateTX) 
		WAIT_TX		: next_state 		= "WAIT_TX";
		START		: next_state 		= "START";
		SEND		: next_state 		= "SEND";
		DATA_VALID	: next_state 		= "DATA_VALID";
		WAIT_DONE	: next_state		= "WAIT_DONE";		 
		WAIT_CYCLE	: next_state		= "WAIT_CYCLE";
      default		: next_state 		= "UNKNOWN";
     endcase
 end
 */
endmodule
