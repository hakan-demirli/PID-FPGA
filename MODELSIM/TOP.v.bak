module TOP(
	input 			i_Clk,
	//input 			i_UART_RX,
	output	 		o_UART_TX,
	output [7:0]	LEDG,
	input  [1:0]	GPIO_AB, // GPIO_AB[0] = A, GPIO_AB[1] = B
	output 			GPIO_PWM,
	input [14:0]SW,
	///////DEBUG///////
	//output state_TX_0,
	//output signal_dc
);
	///////////////////////////////////
	////////////// DEBUG ///////////////
	///////////////////////////////////
	wire i_UART_RX;
 	///////////////////////////////////
	////////////// UART ///////////////
	///////////////////////////////////
	reg [7:0]led;
	assign LEDG = led;	
	
	wire 			done;
	wire 			w_RX_DV;
	wire 			w_TX_DV;
	wire [7:0] 	w_RX_Byte;
	wire [7:0] 	w_TX_Byte;
	wire 			w_TX_Active, w_TX_Serial;
	
	
  // 50,000,000 / 115,200 = 434
  UART_RX #(.CLKS_PER_BIT(434)) UART_RX_Inst
  (.i_Clock(i_Clk),
   .i_RX_Serial(i_UART_RX),
   .o_RX_DV(w_RX_DV),
   .o_RX_Byte(w_RX_Byte));
    
  UART_TX #(.CLKS_PER_BIT(434)) UART_TX_Inst
  (.i_Clock(i_Clk),
   .i_TX_DV(w_TX_DV),      	// Data Ready, Start the transfer by driving this high.
   .i_TX_Byte(w_TX_Byte),  	// Data, To be send.
   .o_TX_Active(w_TX_Active), // TX is in use when high.
   .o_TX_Serial(w_TX_Serial),	// Physical serial wire that transfer the data.
   .o_TX_Done(done));			// High for one cycle after the transfer.
   
	assign o_UART_TX = w_TX_Active ? w_TX_Serial : 1'b1; 
	// Drive UART line high when transmitter is not active
	
 	reg [63:0]number_of_ticks;
	TX_DATA_COLLECTION_STATE_MACHINE TXDCSM_0(
		.i_Clk(i_Clk),
		.number_of_ticks(number_of_ticks),
		.w_TX_Active(w_TX_Active),
		.w_TX_DV(w_TX_DV),
		.w_TX_Byte_reg(w_TX_Byte)
	);

	always@(posedge i_Clk)
	begin
		led <= w_RX_Byte;
		//w_TX_DV <= w_RX_DV;// for echo, connect the data too.
	end
	///////////////////////////////////

	///////////////////////////////////
	/////////////// PWM ///////////////
	///////////////////////////////////
	wire [13:0]signal_dc;
	PWM pwm_0(.clk(i_Clk),
				.PWM_signal(GPIO_PWM),
				.DC(signal_dc));
/*
	SIGNAL_GENERATOR sg_0(
	.signal_dc(signal_dc),
	.SW(SW[14]),
	.i_Clk(i_Clk)
	);
	
	PWM pwm_0(.clk(i_Clk),
				.PWM_signal(GPIO_PWM),
				.DC(signal_dc));
				
	reg [7:0]FIFO[2:0];
	always@(posedge i_Clk)
	begin
		if(w_RX_DV) begin
			FIFO[2] <= FIFO[1];
			FIFO[1] <= FIFO[0];
			FIFO[0] <= w_RX_Byte;
		end
		else if(FIFO[2] == 8'hAA) begin
			signal_dc[7:0] <= FIFO[1];
			signal_dc[13:8]<= FIFO[0][5:0];
		end
	end
*/
	///////////////////////////////////

	///////////////////////////////////
	///////////// TIMERS //////////////
	///////////////////////////////////
	reg reset_timer_0;
	wire [63:0]counter_timer_0;
	wire timer_0_overflow;
	
	TIMER timer_0(	.clk(i_Clk),
						.reset_timer(reset_timer_0),
						.counter_timer(counter_timer_0),
						.overflow(timer_0_overflow));
					
	reg reset_timer_1;
	wire [63:0]counter_timer_1;
	wire timer_1_overflow;	
	TIMER timer_1(	.clk(i_Clk),
					.reset_timer(reset_timer_1),
					.counter_timer(counter_timer_1),
					.overflow(timer_1_overflow));
										
	///////////////////////////////////	
	
	///////////////////////////////////
	//////// SPEED CALCULATIONS ///////
	///////////////////////////////////
	//integer i;
	reg [1:0]GPIO_AB_p;
	reg [1:0]GPIO_AB_c;
	reg [13:0]number_of_pulses;
	wire reset_nop_0;
	reg reset_nop_1;
	
	always@(posedge i_Clk) begin
		GPIO_AB_c <= GPIO_AB;
		GPIO_AB_p[0] <= GPIO_AB_c[0];
		reset_nop_1 <= reset_nop_0;
		if(reset_nop_1) begin
			number_of_pulses <= 0;
		end
		else begin
			if(GPIO_AB_c[0] == 1'b1 && 1'b0 == GPIO_AB_p[0])
			begin
				number_of_pulses = number_of_pulses + 14'b1;
				number_of_ticks <= counter_timer_0;
				reset_timer_0 <= 1'b1;
			end
			else begin
				reset_timer_0 <= 1'b0;
			end
		end
	end
	///////////////////////////////////
		
	///////////////////////////////////
	////////// PID CONTROL ////////////
	///////////////////////////////////
	reg PID_timer;
	PID PID_0(
		.i_Clk(i_Clk),
		.number_of_pulses(number_of_pulses),
		.SW(SW[4:0]),
		.PID_timer(PID_timer),
		.reset_nop_0(reset_nop_0),
		.reset(SW[14]),
		.signal_dc(signal_dc)
	);
	
	parameter HUNDERED_MILISECONDS = 64'd5_000_000;
	always@(posedge i_Clk)begin
		if(counter_timer_1 == HUNDERED_MILISECONDS) begin
			PID_timer <= 1'b1;
			reset_timer_1 <= 1'b1;
		end
		else begin
			PID_timer <= 1'b0;
			reset_timer_1 <= 1'b0;
		end
	end
	
endmodule

////////////////////////////////////////
///////////COPY PASTE TRASH/////////////
//////////////DONT CARE/////////////////
////////////////////////////////////////
/*
Original_input_1 = 
	4'd0: 	signal_dc_0 = 14'h0000;
	4'd1: 	signal_dc_0 = 14'h0762;
	4'd2: 	signal_dc_0 = 14'h1AD4;
	4'd3: 	signal_dc_0 = 14'h072B;
	4'd4: 	signal_dc_0 = 14'h0E65;
	4'd5:		signal_dc_0 = 14'h1870;
	4'd6:		signal_dc_0 = 14'h2710;
	4'd7: 	signal_dc_0 = 14'h032B;
	4'd8: 	signal_dc_0 = 14'h244E;
	4'd9: 	signal_dc_0 = 14'h1E4D;
	4'd10: 	signal_dc_0 = 14'h1304;
	4'd11: 	signal_dc_0 = 14'h1107;
	4'd12: 	signal_dc_0 = 14'h1174;
	4'd13: 	signal_dc_0 = 14'h0BF7;




				//delayed_signal[0] <= number_of_ticks[0];
//				delayed_signal[1] <= number_of_ticks[1];
	//			delayed_signal[2] <= number_of_ticks[2];
		//		delayed_signal[3] <= number_of_ticks[3];
			//	delayed_signal[4] <= number_of_ticks[4];
				//delayed_signal[5] <= number_of_ticks[5];
				//delayed_signal[6] <= number_of_ticks[6];
				//delayed_signal[7] <= number_of_ticks[7];







*/
